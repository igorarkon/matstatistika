Урок 7.

1.Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного
скоринга (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], 
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]. 
Используя математические операции, посчитать коэффициенты линейной регрессии, 
приняв за X заработную плату (то есть, zp - признак), а за y - значения скорингового балла 
(то есть, ks - целевая переменная). Произвести расчет как с использованием intercept, так и без.

Import numpy as np

X = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
n = len(X)

b = (np.mean(X*y) - np.mean(X)*np.mean(y)) / (np.mean(X**2)-np.mean(X)**2)
b
2.620538882402765

s = np.mean(y)-b*np.mean(X)
s
444.1773573243596

X = X.reshape((10,1))
y = y.reshape((10,1))

B = np.dot(np.linalg.inv(np.dot(X.T,X)),X.T@y)
B
array([[5.88982042]])

X=np.hstack([np.ones((10,1)),X])
B = np.dot(np.linalg.inv(np.dot(X.T,X)),X.T@y)
B
array([[444.17735732],
       [  2.62053888]])

2.Посчитать коэффициент линейной регрессии при заработной плате (zp), 
используя градиентный спуск (без intercept).

X = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832]) 

def mse_(B1, y=y, X=X, n=10):
	return np.sum((B1*X-y)**2)/n

B1 = 0.1
alpha = 1e-6

for i in range (10000):
	B1 -=alpha*(2/n)*np.sum((B1*X-y)*X)
	if i%5000 ==0:
		print('Interation: {i},B1={B1},mse={mse}'.format(i=i,B1=B1,mse=mse_(B1)))
Interation: 0,B1=0.5696604092747625,mse=980069.5781477693
Interation: 5000,B1=5.940918592497952,mse=582580.1077342933

